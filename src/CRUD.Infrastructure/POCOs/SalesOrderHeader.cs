// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CRUD.Infrastructure.POCOs
{
    using System;
    using System.Collections.Generic;

    ///<summary>
    /// General sales order information.
    ///</summary>
    public partial class SalesOrderHeader
    {

        ///<summary>
        /// Primary key.
        ///</summary>
       public int SalesOrderId { get; set; }

        ///<summary>
        /// Incremental number to track changes to the sales order over time.
        ///</summary>
       public byte RevisionNumber { get; set; }

        ///<summary>
        /// Dates the sales order was created.
        ///</summary>
       public System.DateTime OrderDate { get; set; }

        ///<summary>
        /// Date the order is due to the customer.
        ///</summary>
       public System.DateTime DueDate { get; set; }

        ///<summary>
        /// Date the order was shipped to the customer.
        ///</summary>
       public System.DateTime? ShipDate { get; set; }

        ///<summary>
        /// Order current status. 1 = In process; 2 = Approved; 3 = Backordered; 4 = Rejected; 5 = Shipped; 6 = Cancelled
        ///</summary>
       public byte Status { get; set; }

        ///<summary>
        /// 0 = Order placed by sales person. 1 = Order placed online by customer.
        ///</summary>
       public bool OnlineOrderFlag { get; set; }

        ///<summary>
        /// Unique sales order identification number.
        ///</summary>
       public string SalesOrderNumber { get; private set; }

        ///<summary>
        /// Customer purchase order number reference.
        ///</summary>
       public string PurchaseOrderNumber { get; set; }

        ///<summary>
        /// Financial accounting number reference.
        ///</summary>
       public string AccountNumber { get; set; }

        ///<summary>
        /// Customer identification number. Foreign key to Customer.BusinessEntityID.
        ///</summary>
       public int CustomerId { get; set; }

        ///<summary>
        /// Sales person who created the sales order. Foreign key to SalesPerson.BusinessEntityID.
        ///</summary>
       public int? SalesPersonId { get; set; }

        ///<summary>
        /// Territory in which the sale was made. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
       public int? TerritoryId { get; set; }

        ///<summary>
        /// Customer billing address. Foreign key to Address.AddressID.
        ///</summary>
       public int BillToAddressId { get; set; }

        ///<summary>
        /// Customer shipping address. Foreign key to Address.AddressID.
        ///</summary>
       public int ShipToAddressId { get; set; }

        ///<summary>
        /// Shipping method. Foreign key to ShipMethod.ShipMethodID.
        ///</summary>
       public int ShipMethodId { get; set; }

        ///<summary>
        /// Credit card identification number. Foreign key to CreditCard.CreditCardID.
        ///</summary>
       public int? CreditCardId { get; set; }

        ///<summary>
        /// Approval code provided by the credit card company.
        ///</summary>
       public string CreditCardApprovalCode { get; set; }

        ///<summary>
        /// Currency exchange rate used. Foreign key to CurrencyRate.CurrencyRateID.
        ///</summary>
       public int? CurrencyRateId { get; set; }

        ///<summary>
        /// Sales subtotal. Computed as SUM(SalesOrderDetail.LineTotal)for the appropriate SalesOrderID.
        ///</summary>
       public decimal SubTotal { get; set; }

        ///<summary>
        /// Tax amount.
        ///</summary>
       public decimal TaxAmt { get; set; }

        ///<summary>
        /// Shipping cost.
        ///</summary>
       public decimal Freight { get; set; }

        ///<summary>
        /// Total due from customer. Computed as Subtotal + TaxAmt + Freight.
        ///</summary>
       public decimal TotalDue { get; private set; }

        ///<summary>
        /// Sales representative comments.
        ///</summary>
       public string Comment { get; set; }

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
       public System.Guid Rowguid { get; set; }

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
       public System.DateTime ModifiedDate { get; set; }

        public ICollection<SalesOrderDetail> SalesOrderDetails { get; set; }
        public ICollection<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons { get; set; }


        public Address BillToAddress { get; set; }

        public Address ShipToAddress { get; set; }

        public CreditCard CreditCard { get; set; }

        public CurrencyRate CurrencyRate { get; set; }

        public Customer Customer { get; set; }

        public SalesPerson SalesPerson { get; set; }

        public SalesTerritory SalesTerritory { get; set; }

        public ShipMethod ShipMethod { get; set; }

        public SalesOrderHeader()
        {
            RevisionNumber = 0;
            OrderDate = System.DateTime.Now;
            Status = 1;
            OnlineOrderFlag = true;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesOrderDetails = new List<SalesOrderDetail>();
            SalesOrderHeaderSalesReasons = new List<SalesOrderHeaderSalesReason>();
            InitializePartial();
        }

        partial void InitializePartial();
    }

}
// </auto-generated>
